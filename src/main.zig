const std = @import("std");
const log = std.log;
const net = std.net;
const io = std.io;
const allocator = std.heap.page_allocator;

const client = @import("client.zig");

pub fn main() !void {
    log.info("started.", .{});
    const endpoint = try net.Address.parseIp("142.250.76.142", 443);
    var tls_client = try client.TLSClient.init(allocator);
    defer tls_client.deinit();
    tls_client.print_keys = true;

    var tcpStream = try net.tcpConnectToAddress(endpoint);

    try tls_client.connect(tcpStream.reader(), tcpStream.writer());

    const http_req = "GET / HTTP/1.1\r\nHost: google.com\r\nUser-Agent: tls13-zig\r\nAccept: */*\r\n\r\n";
    _ = try tls_client.send(http_req, tcpStream.writer());

    var recv_bytes: [4096]u8 = undefined;
    const recv_size = try tls_client.recv(&recv_bytes, tcpStream.reader());
    log.info("RECV=\n {s}", .{recv_bytes[0..recv_size]});

    try tls_client.close(tcpStream.reader(), tcpStream.writer());
    log.info("finished.", .{});

    return;
}

test {
    std.testing.refAllDecls(@This());
}

const expect = std.testing.expect;

test "connect e2e with secp256r1" {
    var tls_client = try client.TLSClient.init(allocator);
    defer tls_client.deinit();
    // zig fmt: off
    const client_privkey = [_]u8{
    0x49, 0xaf, 0x42, 0xba, 0x7f, 0x79, 0x94, 0x85, 0x2d, 0x71, 0x3e, 0xf2, 0x78,
    0x4b, 0xcb, 0xca, 0xa7, 0x91, 0x1d, 0xe2, 0x6a, 0xdc, 0x56, 0x42, 0xcb, 0x63,
    0x45, 0x40, 0xe7, 0xea, 0x50, 0x05
    };
    // zig fmt: on
    try tls_client.configureX25519Keys(client_privkey);

    // zig fmt: off
    const dummy = [_]u8{
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
    0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a,
    0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20
    };
    // zig fmt: on

    tls_client.random = dummy;
    std.mem.copy(u8, tls_client.session_id.session_id.slice(), &dummy);

    tls_client.signature_schems.clearAndFree();
    try tls_client.signature_schems.append(.ecdsa_secp256r1_sha256);

    var test_send_bytes: [2000]u8 = undefined;
    var test_send_stream = io.fixedBufferStream(&test_send_bytes);

    // ClientHello + Finished
    // zig fmt: off
    const client_ans = [_]u8{
    0x16, 0x03, 0x03, 0x00, 0x90, 0x01, 0x00, 0x00, 0x8c, 0x03, 0x03, 0x01, 0x02,
    0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c,
    0x1d, 0x1e, 0x1f, 0x20, 0x20, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x00, 0x02,
    0x13, 0x01, 0x01, 0x00, 0x00, 0x41, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
    0x00, 0x0a, 0x00, 0x04, 0x00, 0x02, 0x00, 0x1d, 0x00, 0x33, 0x00, 0x26, 0x00,
    0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43,
    0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1,
    0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x0d,
    0x00, 0x04, 0x00, 0x02, 0x04, 0x03,
    0x17, 0x03, 0x03, 0x00, 0x35, 0x45, 0x64, 0xb5, 0x03, 0x22, 0x59, 0x8f, 0xe4,
    0x60, 0xd3, 0xd9, 0xba, 0x69, 0xce, 0x7e, 0x90, 0xae, 0xe8, 0x0e, 0x76, 0x2f,
    0x8a, 0xa1, 0xef, 0xbe, 0x24, 0x22, 0x0e, 0xf3, 0xac, 0xbc, 0x05, 0xeb, 0x4b,
    0xa6, 0x5d, 0xdb, 0xe4, 0x8f, 0xd0, 0xe7, 0x99, 0x17, 0x3b, 0xa7, 0x03, 0xef,
    0xf0, 0x32, 0xf8, 0x4b, 0x58, 0x68,
    };
    // zig fmt: on

    // ServerHello + ChangeCipherSpec + EncryptedExtensions +
    // Certificate + Certificate Verify + Finished.
    // zig fmt: off
    const server_msgs = [_]u8{
    0x16, 0x03, 0x03, 0x00, 0x7a, 0x02, 0x00, 0x00, 0x76, 0x03, 0x03, 0xf2, 0xd8,
    0x0a, 0x15, 0xc2, 0xb5, 0x30, 0xc6, 0x8b, 0xe5, 0x0d, 0x22, 0x32, 0x6e, 0x45,
    0xaa, 0x75, 0x6a, 0x5f, 0x7d, 0x4b, 0xd7, 0x19, 0xd3, 0x6e, 0xea, 0x93, 0xe7,
    0x1f, 0x4e, 0x1c, 0x7b, 0x20, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x13, 0x01,
    0x00, 0x00, 0x2e, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04, 0x00, 0x33, 0x00, 0x24,
    0x00, 0x1d, 0x00, 0x20, 0x68, 0x96, 0xe4, 0x75, 0xc7, 0x1c, 0x5c, 0xd4, 0x7e,
    0xa7, 0xac, 0xa0, 0x4a, 0xac, 0xf1, 0x05, 0x4b, 0x54, 0x9c, 0x30, 0xb7, 0xa9,
    0x3c, 0x5b, 0xeb, 0x0b, 0xad, 0x33, 0xa5, 0x14, 0xe7, 0x42, 0x14, 0x03, 0x03,
    0x00, 0x01, 0x01, 0x17, 0x03, 0x03, 0x00, 0x17, 0xce, 0x75, 0xf3, 0x46, 0x38,
    0xeb, 0x15, 0x75, 0x64, 0x32, 0x2b, 0xe7, 0x7d, 0xf4, 0xa5, 0xe6, 0xda, 0xdb,
    0x37, 0x1e, 0x3c, 0x26, 0x46, 0x17, 0x03, 0x03, 0x01, 0xfd, 0x69, 0x32, 0xaf,
    0x45, 0x21, 0xa6, 0x0b, 0x24, 0x78, 0x9b, 0x9e, 0x14, 0x9f, 0x81, 0xd5, 0x20,
    0xfd, 0x54, 0xf5, 0x98, 0x63, 0x9d, 0x3a, 0xde, 0x07, 0x0e, 0x8a, 0x9c, 0x97,
    0x1c, 0x81, 0xa9, 0x0e, 0x85, 0x07, 0xc9, 0x1f, 0xc0, 0x45, 0x07, 0x51, 0x26,
    0x28, 0xaf, 0x4c, 0x47, 0xb7, 0x13, 0x49, 0x40, 0x3c, 0xf5, 0xf4, 0xe9, 0xab,
    0x89, 0x37, 0xcb, 0x0c, 0xe1, 0xfe, 0xbb, 0xd4, 0x6d, 0xc5, 0x44, 0xf3, 0x45,
    0x62, 0x0c, 0xa5, 0xec, 0xc2, 0xe1, 0xf1, 0xd5, 0x55, 0x52, 0x92, 0xd5, 0x11,
    0x24, 0x53, 0xbc, 0xc0, 0x1a, 0x04, 0xea, 0xbb, 0x1b, 0x80, 0xc0, 0xdd, 0x29,
    0xbb, 0xb1, 0x10, 0x0c, 0xce, 0x6d, 0xdd, 0x33, 0x02, 0xe9, 0x84, 0x02, 0xaa,
    0x50, 0xc1, 0xff, 0x78, 0xeb, 0x84, 0x3b, 0x65, 0x38, 0x48, 0xf1, 0x0f, 0x93,
    0x5e, 0x71, 0x17, 0xf6, 0xe8, 0xfb, 0x49, 0xe4, 0xea, 0xa2, 0xfa, 0xc0, 0xe9,
    0x11, 0xf1, 0x8a, 0x1f, 0x9c, 0xb6, 0xae, 0x9c, 0x6d, 0x55, 0xad, 0x77, 0xbc,
    0xaa, 0x98, 0xd1, 0xcd, 0x54, 0x74, 0x1b, 0x8a, 0x55, 0x53, 0x91, 0xdd, 0x44,
    0x9d, 0x2e, 0x22, 0x26, 0xc3, 0x60, 0xfc, 0x9c, 0xf5, 0x8a, 0x41, 0x76, 0xae,
    0xb1, 0xe8, 0xbd, 0x27, 0x38, 0x1d, 0x9d, 0xc2, 0xf4, 0xd0, 0x6c, 0xa3, 0x58,
    0x49, 0x42, 0xf1, 0x71, 0xde, 0x6e, 0x0c, 0x5c, 0x11, 0x90, 0xca, 0x19, 0xe2,
    0x11, 0xae, 0x6b, 0xfc, 0x05, 0x50, 0xf2, 0x6e, 0x13, 0x67, 0xc7, 0xde, 0x1e,
    0x86, 0x73, 0x27, 0xcb, 0xac, 0x89, 0xd7, 0x16, 0x8f, 0xea, 0x67, 0xe7, 0xef,
    0xda, 0x64, 0x2c, 0x7a, 0x9b, 0xcb, 0xa3, 0x58, 0x00, 0xf0, 0x12, 0xcd, 0x22,
    0xc3, 0xc4, 0x39, 0x60, 0x2e, 0x1c, 0xc7, 0x79, 0x4a, 0x18, 0xc8, 0xa6, 0x58,
    0xc8, 0x5b, 0x24, 0x00, 0xeb, 0x46, 0x8f, 0xde, 0x13, 0x8f, 0x73, 0x51, 0x3d,
    0x3c, 0xe1, 0x9a, 0xf2, 0xe0, 0x0b, 0x6a, 0x0b, 0x81, 0x79, 0x59, 0xad, 0x15,
    0x41, 0xc9, 0x70, 0x27, 0x4f, 0x11, 0x50, 0x48, 0x27, 0x61, 0x28, 0xdc, 0x5f,
    0x7b, 0x2f, 0x78, 0x9b, 0x4d, 0x5d, 0xbd, 0x28, 0x58, 0xbe, 0x6a, 0xa1, 0x09,
    0x65, 0x73, 0x96, 0x68, 0x07, 0xae, 0x5d, 0x74, 0x81, 0x9c, 0x31, 0x24, 0xa7,
    0xe6, 0x58, 0xbd, 0xa9, 0x9b, 0xa7, 0x8d, 0x7a, 0xf0, 0x98, 0x0f, 0x23, 0xb9,
    0x63, 0xbb, 0x5c, 0x94, 0xbb, 0x20, 0x03, 0xdb, 0xe8, 0x79, 0xcb, 0x6e, 0x51,
    0xcf, 0x21, 0xa4, 0xb4, 0xfc, 0x72, 0x22, 0xe7, 0x8b, 0xb3, 0x91, 0x13, 0x0c,
    0x76, 0x30, 0x35, 0x02, 0x5b, 0x19, 0x7d, 0x5d, 0xf9, 0x5e, 0x6b, 0x32, 0x13,
    0xa7, 0xb6, 0xb1, 0x2f, 0x39, 0x24, 0xfa, 0xaf, 0x0e, 0xca, 0x2d, 0x9e, 0xab,
    0x52, 0xaa, 0xc9, 0xaa, 0x33, 0xe1, 0x19, 0x81, 0x30, 0x1a, 0x6e, 0xb0, 0x4c,
    0xff, 0xe9, 0x12, 0x74, 0xda, 0xf6, 0xe8, 0xa5, 0x19, 0xe4, 0xe0, 0xeb, 0xe3,
    0x5b, 0x68, 0xd8, 0xb1, 0x67, 0x8b, 0x16, 0x7a, 0x4c, 0x04, 0xfd, 0xbc, 0x10,
    0x46, 0x49, 0x13, 0x62, 0x44, 0xc7, 0x0a, 0x8d, 0x2d, 0xdd, 0x34, 0x97, 0x07,
    0x87, 0xda, 0xa4, 0xc3, 0x17, 0x9e, 0xce, 0x62, 0x28, 0x2e, 0xd1, 0x1d, 0x01,
    0x3d, 0x1a, 0xe5, 0xe9, 0xb1, 0xca, 0x3b, 0xec, 0xd6, 0xba, 0x71, 0x5d, 0xfe,
    0x58, 0xfb, 0xa5, 0xe4, 0x46, 0xbb, 0xcf, 0xd3, 0x55, 0x50, 0x3f, 0x6a, 0x37,
    0x58, 0xa3, 0x12, 0x12, 0xfe, 0x5d, 0x86, 0xde, 0xf6, 0xee, 0x11, 0xd0, 0x18,
    0x25, 0xe5, 0x94, 0x5c, 0x83, 0x24, 0xd0, 0x30, 0x6c, 0x33, 0x43, 0x48, 0x1b,
    0x52, 0x2c, 0x2c, 0xaf, 0xd8, 0x3f, 0xcd, 0xc9, 0x90, 0xfd, 0x20, 0x48, 0x17,
    0x03, 0x03, 0x00, 0x60, 0x79, 0x5f, 0xda, 0x4b, 0xd5, 0x9d, 0x4d, 0x52, 0x9d,
    0xa4, 0xb7, 0xf3, 0x10, 0xc6, 0x11, 0x2c, 0xa5, 0xe1, 0x44, 0xdd, 0xe1, 0x3d,
    0xf9, 0xc6, 0x3e, 0xee, 0x93, 0x05, 0x5a, 0xe4, 0x5e, 0x0f, 0x3d, 0x14, 0x21,
    0xbb, 0xcb, 0x74, 0x2a, 0x57, 0xa4, 0x34, 0x6a, 0x6d, 0xf9, 0x7a, 0xf9, 0xe4,
    0xba, 0x1c, 0x51, 0xe3, 0x1c, 0x04, 0x0e, 0x7a, 0xd8, 0xa2, 0x2d, 0x35, 0xd5,
    0xdd, 0xec, 0x16, 0x79, 0x7f, 0xea, 0x5d, 0x79, 0x86, 0xb9, 0x53, 0x29, 0x14,
    0x21, 0x72, 0xdb, 0x92, 0x57, 0x95, 0xd6, 0xe9, 0xe3, 0xe9, 0x76, 0x2e, 0x64,
    0x97, 0xfc, 0xd6, 0x59, 0xef, 0x1b, 0x44, 0xe0, 0x72, 0x17, 0x03, 0x03, 0x00,
    0x35, 0xd8, 0x87, 0x31, 0x03, 0x69, 0x96, 0xd2, 0x0e, 0x97, 0x7b, 0x94, 0x49,
    0xf9, 0xaf, 0x5f, 0x27, 0xab, 0xf9, 0xff, 0xd8, 0x7b, 0x24, 0x6d, 0x27, 0x4e,
    0xff, 0x03, 0x55, 0xe4, 0x94, 0x48, 0x3c, 0xc1, 0x90, 0x3d, 0x16, 0x25, 0x2c,
    0x00, 0x4c, 0x1e, 0x73, 0xaf, 0x6b, 0xfe, 0xa3, 0xc1, 0xbd, 0x33, 0x5a, 0x2c,
    0x57, 0x7b,
    };
    // zig fmt: on

    var test_recv_stream = io.fixedBufferStream(&server_msgs);

    try tls_client.connect(test_recv_stream.reader(), test_send_stream.writer());
    try expect(std.mem.eql(u8, &client_ans, test_send_stream.getWritten()));
}
