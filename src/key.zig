const std = @import("std");
const mem = std.mem;
const dh = std.crypto.dh;
const hkdf = std.crypto.kdf.hkdf;
const hmac = std.crypto.auth.hmac;
const expect = std.testing.expect;

test "X25519 key pair deriviation" {
    const s_key = [_]u8{ 0x49, 0xaf, 0x42, 0xba, 0x7f, 0x79, 0x94, 0x85, 0x2d, 0x71, 0x3e, 0xf2, 0x78, 0x4b, 0xcb, 0xca, 0xa7, 0x91, 0x1d, 0xe2, 0x6a, 0xdc, 0x56, 0x42, 0xcb, 0x63, 0x45, 0x40, 0xe7, 0xea, 0x50, 0x05 };
    const p_key_ans = [_]u8{ 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c };
    const p_key = try dh.X25519.recoverPublicKey(s_key);

    try expect(std.mem.eql(u8, &p_key, &p_key_ans));
}

test "HKDF-SHA256 early key deriviation" {
    const s_ans = [_]u8{ 0x33, 0xad, 0x0a, 0x1c, 0x60, 0x7e, 0xc0, 0x3b, 0x09, 0xe6, 0xcd, 0x98, 0x93, 0x68, 0x0c, 0xe2, 0x10, 0xad, 0xf3, 0x00, 0xaa, 0x1f, 0x26, 0x60, 0xe1, 0xb2, 0x2e, 0x10, 0xf1, 0x70, 0xf9, 0x2a };
    const s = deriveEarlySecret(Sha256, &([_]u8{0} ** 32));

    try expect(std.mem.eql(u8, &s, &s_ans));
}

pub fn deriveEarlySecret(comptime Hash: type, ikm: []const u8) [Hash.digest_length]u8 {
    const K = hkdf.Hkdf(hmac.Hmac(Hash));
    const salt = [_]u8{0};

    return K.extract(&salt, ikm);
}

/// Maximum length of a label in bytes
pub const max_label_length: usize = 256;

// Maximum length of a context in bytes
pub const max_context_length: usize = 256;

// Maximum length of a HkdfLabel in bytes
pub const max_hkdf_label_length: usize = 2 + max_label_length + max_context_length;

const ArrayList = std.ArrayList;
const FixedBufferAllocator = std.heap.FixedBufferAllocator;
const BoundedArray = std.BoundedArray;

const Sha256 = std.crypto.hash.sha2.Sha256;

fn generateHkdfLabel(len: u16, label: []const u8, ctx: []const u8) !BoundedArray(u8, max_hkdf_label_length) {
    var hkdf_label = try BoundedArray(u8, max_hkdf_label_length).init(0);

    var len_buf = [_]u8{0} ** 2;
    mem.writeIntBig(u16, &len_buf, len);

    try hkdf_label.appendSlice(&len_buf);
    try hkdf_label.append(@intCast(u8, 6 + label.len)); // "tls13 ".len + label.len
    try hkdf_label.appendSlice("tls13 ");
    try hkdf_label.appendSlice(label);
    try hkdf_label.append(@intCast(u8, ctx.len));
    try hkdf_label.appendSlice(ctx);

    return hkdf_label;
}

pub fn hkdfExpandLabel(comptime Hash: type, prk: [Hash.digest_length]u8, label: []const u8, ctx: []const u8, comptime len: usize) ![len]u8 {
    const K = hkdf.Hkdf(hmac.Hmac(Hash));

    var out: [len]u8 = undefined;
    const info = try generateHkdfLabel(len, label, ctx);

    K.expand(&out, info.slice(), prk);

    return out;
}

pub fn deriveSecret(comptime Hash: type, prk: [Hash.digest_length]u8, label: []const u8, msg:[]const u8) ![Hash.digest_length]u8 {
    var hash: [Hash.digest_length]u8 = undefined;
    Hash.hash(msg, &hash, .{});

    return try hkdfExpandLabel(Hash, prk, label, &hash, Hash.digest_length);
}

test "HkdfLabel" {
    var hash: [Sha256.digest_length]u8 = undefined;
    const hash_ans = [_]u8{ 0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55 };
    Sha256.hash("", &hash, .{});

    try expect(std.mem.eql(u8, &hash, &hash_ans));

    const info_ans = [_]u8{ 0x00, 0x20, 0x0d, 0x74, 0x6c, 0x73, 0x31, 0x33, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55 };
    const info = try generateHkdfLabel(hash.len, "derived", &hash);
    try expect(std.mem.eql(u8, info.slice(), &info_ans));
}

test "derive secret for handshake 'tls13 derived'" {
    const prk = [_]u8{ 0x33, 0xad, 0x0a, 0x1c, 0x60, 0x7e, 0xc0, 0x3b, 0x09, 0xe6, 0xcd, 0x98, 0x93, 0x68, 0x0c, 0xe2, 0x10, 0xad, 0xf3, 0x00, 0xaa, 0x1f, 0x26, 0x60, 0xe1, 0xb2, 0x2e, 0x10, 0xf1, 0x70, 0xf9, 0x2a };
    const secret_ans = [_]u8{ 0x6f, 0x26, 0x15, 0xa1, 0x08, 0xc7, 0x02, 0xc5, 0x67, 0x8f, 0x54, 0xfc, 0x9d, 0xba, 0xb6, 0x97, 0x16, 0xc0, 0x76, 0x18, 0x9c, 0x48, 0x25, 0x0c, 0xeb, 0xea, 0xc3, 0x57, 0x6c, 0x36, 0x11, 0xba };

    const secret = try deriveSecret(Sha256, prk, "derived", "");
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "ECDHE key sharing" {
    const c_pubkey = [_]u8{ 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c };
    const s_privkey = [_]u8{ 0xb1, 0x58, 0x0e, 0xea, 0xdf, 0x6d, 0xd5, 0x89, 0xb8, 0xef, 0x4f, 0x2d, 0x56, 0x52, 0x57, 0x8c, 0xc8, 0x10, 0xe9, 0x98, 0x01, 0x91, 0xec, 0x8d, 0x05, 0x83, 0x08, 0xce, 0xa2, 0x16, 0xa2, 0x1e };

    const shared_key_ans = [_]u8{ 0x8b, 0xd4, 0x05, 0x4f, 0xb5, 0x5b, 0x9d, 0x63, 0xfd, 0xfb, 0xac, 0xf9, 0xf0, 0x4b, 0x9f, 0x0d, 0x35, 0xe6, 0xd6, 0x3f, 0x53, 0x75, 0x63, 0xef, 0xd4, 0x62, 0x72, 0x90, 0x0f, 0x89, 0x49, 0x2d };

    const shared_key = try dh.X25519.scalarmult(s_privkey, c_pubkey);
    try expect(std.mem.eql(u8, &shared_key, &shared_key_ans));
}

test "extract secret 'handshake'" {
    const ikm = [_]u8{ 0x8b, 0xd4, 0x05, 0x4f, 0xb5, 0x5b, 0x9d, 0x63, 0xfd, 0xfb, 0xac, 0xf9, 0xf0, 0x4b, 0x9f, 0x0d, 0x35, 0xe6, 0xd6, 0x3f, 0x53, 0x75, 0x63, 0xef, 0xd4, 0x62, 0x72, 0x90, 0x0f, 0x89, 0x49, 0x2d };
    const salt = [_]u8{ 0x6f, 0x26, 0x15, 0xa1, 0x08, 0xc7, 0x02, 0xc5, 0x67, 0x8f, 0x54, 0xfc, 0x9d, 0xba, 0xb6, 0x97, 0x16, 0xc0, 0x76, 0x18, 0x9c, 0x48, 0x25, 0x0c, 0xeb, 0xea, 0xc3, 0x57, 0x6c, 0x36, 0x11, 0xba };
    const secret_ans = [_]u8{ 0x1d, 0xc8, 0x26, 0xe9, 0x36, 0x06, 0xaa, 0x6f, 0xdc, 0x0a, 0xad, 0xc1, 0x2f, 0x74, 0x1b, 0x01, 0x04, 0x6a, 0xa6, 0xb9, 0x9f, 0x69, 0x1e, 0xd2, 0x21, 0xa9, 0xf0, 0xca, 0x04, 0x3f, 0xbe, 0xac };

    const secret = hkdf.Hkdf(hmac.Hmac(Sha256)).extract(&salt, &ikm);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive secret 'tls13 c hs traffic'" {
    const client_hello = [_]u8{ 0x01, 0x00, 0x00, 0xc0, 0x03, 0x03, 0xcb, 0x34, 0xec, 0xb1, 0xe7, 0x81, 0x63, 0xba, 0x1c, 0x38, 0xc6, 0xda, 0xcb, 0x19, 0x6a, 0x6d, 0xff, 0xa2, 0x1a, 0x8d, 0x99, 0x12, 0xec, 0x18, 0xa2, 0xef, 0x62, 0x83, 0x02, 0x4d, 0xec, 0xe7, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x03, 0x13, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x01, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01 };
    const server_hello = [_]u8{ 0x02, 0x00, 0x00, 0x56, 0x03, 0x03, 0xa6, 0xaf, 0x06, 0xa4, 0x12, 0x18, 0x60, 0xdc, 0x5e, 0x6e, 0x60, 0x24, 0x9c, 0xd3, 0x4c, 0x95, 0x93, 0x0c, 0x8a, 0xc5, 0xcb, 0x14, 0x34, 0xda, 0xc1, 0x55, 0x77, 0x2e, 0xd3, 0xe2, 0x69, 0x28, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x82, 0x88, 0x76, 0x11, 0x20, 0x95, 0xfe, 0x66, 0x76, 0x2b, 0xdb, 0xf7, 0xc6, 0x72, 0xe1, 0x56, 0xd6, 0xcc, 0x25, 0x3b, 0x83, 0x3d, 0xf1, 0xdd, 0x69, 0xb1, 0xb0, 0x4e, 0x75, 0x1f, 0x0f, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04 };
    const msg = client_hello ++ server_hello;
    const prk = [_]u8{ 0x1d, 0xc8, 0x26, 0xe9, 0x36, 0x06, 0xaa, 0x6f, 0xdc, 0x0a, 0xad, 0xc1, 0x2f, 0x74, 0x1b, 0x01, 0x04, 0x6a, 0xa6, 0xb9, 0x9f, 0x69, 0x1e, 0xd2, 0x21, 0xa9, 0xf0, 0xca, 0x04, 0x3f, 0xbe, 0xac };
    const secret_ans = [_]u8{ 0xb3, 0xed, 0xdb, 0x12, 0x6e, 0x06, 0x7f, 0x35, 0xa7, 0x80, 0xb3, 0xab, 0xf4, 0x5e, 0x2d, 0x8f, 0x3b, 0x1a, 0x95, 0x07, 0x38, 0xf5, 0x2e, 0x96, 0x00, 0x74, 0x6a, 0x0e, 0x27, 0xa5, 0x5a, 0x21 };

    const secret = try deriveSecret(Sha256, prk, "c hs traffic", &msg);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive secret 'tls13 s hs traffic'" {
    const client_hello = [_]u8{ 0x01, 0x00, 0x00, 0xc0, 0x03, 0x03, 0xcb, 0x34, 0xec, 0xb1, 0xe7, 0x81, 0x63, 0xba, 0x1c, 0x38, 0xc6, 0xda, 0xcb, 0x19, 0x6a, 0x6d, 0xff, 0xa2, 0x1a, 0x8d, 0x99, 0x12, 0xec, 0x18, 0xa2, 0xef, 0x62, 0x83, 0x02, 0x4d, 0xec, 0xe7, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x03, 0x13, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x01, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01 };
    const server_hello = [_]u8{ 0x02, 0x00, 0x00, 0x56, 0x03, 0x03, 0xa6, 0xaf, 0x06, 0xa4, 0x12, 0x18, 0x60, 0xdc, 0x5e, 0x6e, 0x60, 0x24, 0x9c, 0xd3, 0x4c, 0x95, 0x93, 0x0c, 0x8a, 0xc5, 0xcb, 0x14, 0x34, 0xda, 0xc1, 0x55, 0x77, 0x2e, 0xd3, 0xe2, 0x69, 0x28, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x82, 0x88, 0x76, 0x11, 0x20, 0x95, 0xfe, 0x66, 0x76, 0x2b, 0xdb, 0xf7, 0xc6, 0x72, 0xe1, 0x56, 0xd6, 0xcc, 0x25, 0x3b, 0x83, 0x3d, 0xf1, 0xdd, 0x69, 0xb1, 0xb0, 0x4e, 0x75, 0x1f, 0x0f, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04 };
    const msg = client_hello ++ server_hello;
    const prk = [_]u8{ 0x1d, 0xc8, 0x26, 0xe9, 0x36, 0x06, 0xaa, 0x6f, 0xdc, 0x0a, 0xad, 0xc1, 0x2f, 0x74, 0x1b, 0x01, 0x04, 0x6a, 0xa6, 0xb9, 0x9f, 0x69, 0x1e, 0xd2, 0x21, 0xa9, 0xf0, 0xca, 0x04, 0x3f, 0xbe, 0xac };
    const secret_ans = [_]u8{ 0xb6, 0x7b, 0x7d, 0x69, 0x0c, 0xc1, 0x6c, 0x4e, 0x75, 0xe5, 0x42, 0x13, 0xcb, 0x2d, 0x37, 0xb4, 0xe9, 0xc9, 0x12, 0xbc, 0xde, 0xd9, 0x10, 0x5d, 0x42, 0xbe, 0xfd, 0x59, 0xd3, 0x91, 0xad, 0x38 };

    const secret = try deriveSecret(Sha256, prk, "s hs traffic", &msg);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive secret for master 'tls13 derived'" {
    const prk = [_]u8{ 0x1d, 0xc8, 0x26, 0xe9, 0x36, 0x06, 0xaa, 0x6f, 0xdc, 0x0a, 0xad, 0xc1, 0x2f, 0x74, 0x1b, 0x01, 0x04, 0x6a, 0xa6, 0xb9, 0x9f, 0x69, 0x1e, 0xd2, 0x21, 0xa9, 0xf0, 0xca, 0x04, 0x3f, 0xbe, 0xac };
    const secret_ans = [_]u8{ 0x43, 0xde, 0x77, 0xe0, 0xc7, 0x77, 0x13, 0x85, 0x9a, 0x94, 0x4d, 0xb9, 0xdb, 0x25, 0x90, 0xb5, 0x31, 0x90, 0xa6, 0x5b, 0x3e, 0xe2, 0xe4, 0xf1, 0x2d, 0xd7, 0xa0, 0xbb, 0x7c, 0xe2, 0x54, 0xb4 };

    const secret = try deriveSecret(Sha256, prk, "derived", "");
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "extract secret 'master'" {
    const ikm = [_]u8{0} ** 32;
    const salt = [_]u8{ 0x43, 0xde, 0x77, 0xe0, 0xc7, 0x77, 0x13, 0x85, 0x9a, 0x94, 0x4d, 0xb9, 0xdb, 0x25, 0x90, 0xb5, 0x31, 0x90, 0xa6, 0x5b, 0x3e, 0xe2, 0xe4, 0xf1, 0x2d, 0xd7, 0xa0, 0xbb, 0x7c, 0xe2, 0x54, 0xb4 };
    const secret_ans = [_]u8{ 0x18, 0xdf, 0x06, 0x84, 0x3d, 0x13, 0xa0, 0x8b, 0xf2, 0xa4, 0x49, 0x84, 0x4c, 0x5f, 0x8a, 0x47, 0x80, 0x01, 0xbc, 0x4d, 0x4c, 0x62, 0x79, 0x84, 0xd5, 0xa4, 0x1d, 0xa8, 0xd0, 0x40, 0x29, 0x19 };

    const secret = hkdf.Hkdf(hmac.Hmac(Sha256)).extract(&salt, &ikm);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive write traffic keys for handshake data" {
    const prk = [_]u8{ 0xb6, 0x7b, 0x7d, 0x69, 0x0c, 0xc1, 0x6c, 0x4e, 0x75, 0xe5, 0x42, 0x13, 0xcb, 0x2d, 0x37, 0xb4, 0xe9, 0xc9, 0x12, 0xbc, 0xde, 0xd9, 0x10, 0x5d, 0x42, 0xbe, 0xfd, 0x59, 0xd3, 0x91, 0xad, 0x38 };

    const key_ans = [_]u8{ 0x3f, 0xce, 0x51, 0x60, 0x09, 0xc2, 0x17, 0x27, 0xd0, 0xf2, 0xe4, 0xe8, 0x6e, 0xe4, 0x03, 0xbc };
    const iv_ans = [_]u8{ 0x5d, 0x31, 0x3e, 0xb2, 0x67, 0x12, 0x76, 0xee, 0x13, 0x00, 0x0b, 0x30 };

    const key = try hkdfExpandLabel(Sha256, prk, "key", "", 16);
    try expect(std.mem.eql(u8, &key, &key_ans));

    const iv = try hkdfExpandLabel(Sha256, prk, "iv", "", 12);
    try expect(std.mem.eql(u8, &iv, &iv_ans));
}

test "calculate finished 'tls13 finished'" {
    const prk = [_]u8{ 0xb6, 0x7b, 0x7d, 0x69, 0x0c, 0xc1, 0x6c, 0x4e, 0x75, 0xe5, 0x42, 0x13, 0xcb, 0x2d, 0x37, 0xb4, 0xe9, 0xc9, 0x12, 0xbc, 0xde, 0xd9, 0x10, 0x5d, 0x42, 0xbe, 0xfd, 0x59, 0xd3, 0x91, 0xad, 0x38 };
    const client_hello = [_]u8{ 0x01, 0x00, 0x00, 0xc0, 0x03, 0x03, 0xcb, 0x34, 0xec, 0xb1, 0xe7, 0x81, 0x63, 0xba, 0x1c, 0x38, 0xc6, 0xda, 0xcb, 0x19, 0x6a, 0x6d, 0xff, 0xa2, 0x1a, 0x8d, 0x99, 0x12, 0xec, 0x18, 0xa2, 0xef, 0x62, 0x83, 0x02, 0x4d, 0xec, 0xe7, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x03, 0x13, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x01, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01 };
    const server_hello = [_]u8{ 0x02, 0x00, 0x00, 0x56, 0x03, 0x03, 0xa6, 0xaf, 0x06, 0xa4, 0x12, 0x18, 0x60, 0xdc, 0x5e, 0x6e, 0x60, 0x24, 0x9c, 0xd3, 0x4c, 0x95, 0x93, 0x0c, 0x8a, 0xc5, 0xcb, 0x14, 0x34, 0xda, 0xc1, 0x55, 0x77, 0x2e, 0xd3, 0xe2, 0x69, 0x28, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x82, 0x88, 0x76, 0x11, 0x20, 0x95, 0xfe, 0x66, 0x76, 0x2b, 0xdb, 0xf7, 0xc6, 0x72, 0xe1, 0x56, 0xd6, 0xcc, 0x25, 0x3b, 0x83, 0x3d, 0xf1, 0xdd, 0x69, 0xb1, 0xb0, 0x4e, 0x75, 0x1f, 0x0f, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04 };
    const encrypted_extensions = [_]u8{ 0x08, 0x00, 0x00, 0x24, 0x00, 0x22, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x1C, 0x00, 0x02, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00 };
    const certificate = [_]u8{ 0x0B, 0x00, 0x01, 0xB9, 0x00, 0x00, 0x01, 0xB5, 0x00, 0x01, 0xB0, 0x30, 0x82, 0x01, 0xAC, 0x30, 0x82, 0x01, 0x15, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xB4, 0xBB, 0x49, 0x8F, 0x82, 0x79, 0x30, 0x3D, 0x98, 0x08, 0x36, 0x39, 0x9B, 0x36, 0xC6, 0x98, 0x8C, 0x0C, 0x68, 0xDE, 0x55, 0xE1, 0xBD, 0xB8, 0x26, 0xD3, 0x90, 0x1A, 0x24, 0x61, 0xEA, 0xFD, 0x2D, 0xE4, 0x9A, 0x91, 0xD0, 0x15, 0xAB, 0xBC, 0x9A, 0x95, 0x13, 0x7A, 0xCE, 0x6C, 0x1A, 0xF1, 0x9E, 0xAA, 0x6A, 0xF9, 0x8C, 0x7C, 0xED, 0x43, 0x12, 0x09, 0x98, 0xE1, 0x87, 0xA8, 0x0E, 0xE0, 0xCC, 0xB0, 0x52, 0x4B, 0x1B, 0x01, 0x8C, 0x3E, 0x0B, 0x63, 0x26, 0x4D, 0x44, 0x9A, 0x6D, 0x38, 0xE2, 0x2A, 0x5F, 0xDA, 0x43, 0x08, 0x46, 0x74, 0x80, 0x30, 0x53, 0x0E, 0xF0, 0x46, 0x1C, 0x8C, 0xA9, 0xD9, 0xEF, 0xBF, 0xAE, 0x8E, 0xA6, 0xD1, 0xD0, 0x3E, 0x2B, 0xD1, 0x93, 0xEF, 0xF0, 0xAB, 0x9A, 0x80, 0x02, 0xC4, 0x74, 0x28, 0xA6, 0xD3, 0x5A, 0x8D, 0x88, 0xD7, 0x9F, 0x7F, 0x1E, 0x3F, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x1A, 0x30, 0x18, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x85, 0xAA, 0xD2, 0xA0, 0xE5, 0xB9, 0x27, 0x6B, 0x90, 0x8C, 0x65, 0xF7, 0x3A, 0x72, 0x67, 0x17, 0x06, 0x18, 0xA5, 0x4C, 0x5F, 0x8A, 0x7B, 0x33, 0x7D, 0x2D, 0xF7, 0xA5, 0x94, 0x36, 0x54, 0x17, 0xF2, 0xEA, 0xE8, 0xF8, 0xA5, 0x8C, 0x8F, 0x81, 0x72, 0xF9, 0x31, 0x9C, 0xF3, 0x6B, 0x7F, 0xD6, 0xC5, 0x5B, 0x80, 0xF2, 0x1A, 0x03, 0x01, 0x51, 0x56, 0x72, 0x60, 0x96, 0xFD, 0x33, 0x5E, 0x5E, 0x67, 0xF2, 0xDB, 0xF1, 0x02, 0x70, 0x2E, 0x60, 0x8C, 0xCA, 0xE6, 0xBE, 0xC1, 0xFC, 0x63, 0xA4, 0x2A, 0x99, 0xBE, 0x5C, 0x3E, 0xB7, 0x10, 0x7C, 0x3C, 0x54, 0xE9, 0xB9, 0xEB, 0x2B, 0xD5, 0x20, 0x3B, 0x1C, 0x3B, 0x84, 0xE0, 0xA8, 0xB2, 0xF7, 0x59, 0x40, 0x9B, 0xA3, 0xEA, 0xC9, 0xD9, 0x1D, 0x40, 0x2D, 0xCC, 0x0C, 0xC8, 0xF8, 0x96, 0x12, 0x29, 0xAC, 0x91, 0x87, 0xB4, 0x2B, 0x4D, 0xE1, 0x00, 0x00 };
    const certificate_verify = [_]u8{ 0x0F, 0x00, 0x00, 0x84, 0x08, 0x04, 0x00, 0x80, 0x5A, 0x74, 0x7C, 0x5D, 0x88, 0xFA, 0x9B, 0xD2, 0xE5, 0x5A, 0xB0, 0x85, 0xA6, 0x10, 0x15, 0xB7, 0x21, 0x1F, 0x82, 0x4C, 0xD4, 0x84, 0x14, 0x5A, 0xB3, 0xFF, 0x52, 0xF1, 0xFD, 0xA8, 0x47, 0x7B, 0x0B, 0x7A, 0xBC, 0x90, 0xDB, 0x78, 0xE2, 0xD3, 0x3A, 0x5C, 0x14, 0x1A, 0x07, 0x86, 0x53, 0xFA, 0x6B, 0xEF, 0x78, 0x0C, 0x5E, 0xA2, 0x48, 0xEE, 0xAA, 0xA7, 0x85, 0xC4, 0xF3, 0x94, 0xCA, 0xB6, 0xD3, 0x0B, 0xBE, 0x8D, 0x48, 0x59, 0xEE, 0x51, 0x1F, 0x60, 0x29, 0x57, 0xB1, 0x54, 0x11, 0xAC, 0x02, 0x76, 0x71, 0x45, 0x9E, 0x46, 0x44, 0x5C, 0x9E, 0xA5, 0x8C, 0x18, 0x1E, 0x81, 0x8E, 0x95, 0xB8, 0xC3, 0xFB, 0x0B, 0xF3, 0x27, 0x84, 0x09, 0xD3, 0xBE, 0x15, 0x2A, 0x3D, 0xA5, 0x04, 0x3E, 0x06, 0x3D, 0xDA, 0x65, 0xCD, 0xF5, 0xAE, 0xA2, 0x0D, 0x53, 0xDF, 0xAC, 0xD4, 0x2F, 0x74, 0xF3 };
    const msg = client_hello ++ server_hello ++ encrypted_extensions ++ certificate ++ certificate_verify;

    const finished_key_ans = [_]u8{ 0x00, 0x8d, 0x3b, 0x66, 0xf8, 0x16, 0xea, 0x55, 0x9f, 0x96, 0xb5, 0x37, 0xe8, 0x85, 0xc3, 0x1f, 0xc0, 0x68, 0xbf, 0x49, 0x2c, 0x65, 0x2f, 0x01, 0xf2, 0x88, 0xa1, 0xd8, 0xcd, 0xc1, 0x9f, 0xc8 };
    const finished_key = try hkdfExpandLabel(Sha256, prk, "finished", "", Sha256.digest_length);
    try expect(std.mem.eql(u8, &finished_key, &finished_key_ans));

    var finished: [32]u8 = undefined;
    const finished_ans = [_]u8{ 0x9b, 0x9b, 0x14, 0x1d, 0x90, 0x63, 0x37, 0xfb, 0xd2, 0xcb, 0xdc, 0xe7, 0x1d, 0xf4, 0xde, 0xda, 0x4a, 0xb4, 0x2c, 0x30, 0x95, 0x72, 0xcb, 0x7f, 0xff, 0xee, 0x54, 0x54, 0xb7, 0x8f, 0x07, 0x18 };
    var hash: [Sha256.digest_length]u8 = undefined;
    Sha256.hash(&msg, &hash, .{});
    hmac.Hmac(Sha256).create(&finished, &hash, &finished_key);
    //std.log.warn("finished_key = {}", .{std.fmt.fmtSliceHexLower(&finished)});
    try expect(std.mem.eql(u8, &finished, &finished_ans));
}

test "derive secret 'tls13 c ap traffic'" {
    const prk = [_]u8{ 0x18, 0xdf, 0x06, 0x84, 0x3d, 0x13, 0xa0, 0x8b, 0xf2, 0xa4, 0x49, 0x84, 0x4c, 0x5f, 0x8a, 0x47, 0x80, 0x01, 0xbc, 0x4d, 0x4c, 0x62, 0x79, 0x84, 0xd5, 0xa4, 0x1d, 0xa8, 0xd0, 0x40, 0x29, 0x19 };
    const secret_ans = [_]u8{ 0x9e, 0x40, 0x64, 0x6c, 0xe7, 0x9a, 0x7f, 0x9d, 0xc0, 0x5a, 0xf8, 0x88, 0x9b, 0xce, 0x65, 0x52, 0x87, 0x5a, 0xfa, 0x0b, 0x06, 0xdf, 0x00, 0x87, 0xf7, 0x92, 0xeb, 0xb7, 0xc1, 0x75, 0x04, 0xa5 };

    const client_hello = [_]u8{ 0x01, 0x00, 0x00, 0xc0, 0x03, 0x03, 0xcb, 0x34, 0xec, 0xb1, 0xe7, 0x81, 0x63, 0xba, 0x1c, 0x38, 0xc6, 0xda, 0xcb, 0x19, 0x6a, 0x6d, 0xff, 0xa2, 0x1a, 0x8d, 0x99, 0x12, 0xec, 0x18, 0xa2, 0xef, 0x62, 0x83, 0x02, 0x4d, 0xec, 0xe7, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x03, 0x13, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x01, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01 };
    const server_hello = [_]u8{ 0x02, 0x00, 0x00, 0x56, 0x03, 0x03, 0xa6, 0xaf, 0x06, 0xa4, 0x12, 0x18, 0x60, 0xdc, 0x5e, 0x6e, 0x60, 0x24, 0x9c, 0xd3, 0x4c, 0x95, 0x93, 0x0c, 0x8a, 0xc5, 0xcb, 0x14, 0x34, 0xda, 0xc1, 0x55, 0x77, 0x2e, 0xd3, 0xe2, 0x69, 0x28, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x82, 0x88, 0x76, 0x11, 0x20, 0x95, 0xfe, 0x66, 0x76, 0x2b, 0xdb, 0xf7, 0xc6, 0x72, 0xe1, 0x56, 0xd6, 0xcc, 0x25, 0x3b, 0x83, 0x3d, 0xf1, 0xdd, 0x69, 0xb1, 0xb0, 0x4e, 0x75, 0x1f, 0x0f, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04 };
    const encrypted_extensions = [_]u8{ 0x08, 0x00, 0x00, 0x24, 0x00, 0x22, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x1C, 0x00, 0x02, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00 };
    const certificate = [_]u8{ 0x0B, 0x00, 0x01, 0xB9, 0x00, 0x00, 0x01, 0xB5, 0x00, 0x01, 0xB0, 0x30, 0x82, 0x01, 0xAC, 0x30, 0x82, 0x01, 0x15, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xB4, 0xBB, 0x49, 0x8F, 0x82, 0x79, 0x30, 0x3D, 0x98, 0x08, 0x36, 0x39, 0x9B, 0x36, 0xC6, 0x98, 0x8C, 0x0C, 0x68, 0xDE, 0x55, 0xE1, 0xBD, 0xB8, 0x26, 0xD3, 0x90, 0x1A, 0x24, 0x61, 0xEA, 0xFD, 0x2D, 0xE4, 0x9A, 0x91, 0xD0, 0x15, 0xAB, 0xBC, 0x9A, 0x95, 0x13, 0x7A, 0xCE, 0x6C, 0x1A, 0xF1, 0x9E, 0xAA, 0x6A, 0xF9, 0x8C, 0x7C, 0xED, 0x43, 0x12, 0x09, 0x98, 0xE1, 0x87, 0xA8, 0x0E, 0xE0, 0xCC, 0xB0, 0x52, 0x4B, 0x1B, 0x01, 0x8C, 0x3E, 0x0B, 0x63, 0x26, 0x4D, 0x44, 0x9A, 0x6D, 0x38, 0xE2, 0x2A, 0x5F, 0xDA, 0x43, 0x08, 0x46, 0x74, 0x80, 0x30, 0x53, 0x0E, 0xF0, 0x46, 0x1C, 0x8C, 0xA9, 0xD9, 0xEF, 0xBF, 0xAE, 0x8E, 0xA6, 0xD1, 0xD0, 0x3E, 0x2B, 0xD1, 0x93, 0xEF, 0xF0, 0xAB, 0x9A, 0x80, 0x02, 0xC4, 0x74, 0x28, 0xA6, 0xD3, 0x5A, 0x8D, 0x88, 0xD7, 0x9F, 0x7F, 0x1E, 0x3F, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x1A, 0x30, 0x18, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x85, 0xAA, 0xD2, 0xA0, 0xE5, 0xB9, 0x27, 0x6B, 0x90, 0x8C, 0x65, 0xF7, 0x3A, 0x72, 0x67, 0x17, 0x06, 0x18, 0xA5, 0x4C, 0x5F, 0x8A, 0x7B, 0x33, 0x7D, 0x2D, 0xF7, 0xA5, 0x94, 0x36, 0x54, 0x17, 0xF2, 0xEA, 0xE8, 0xF8, 0xA5, 0x8C, 0x8F, 0x81, 0x72, 0xF9, 0x31, 0x9C, 0xF3, 0x6B, 0x7F, 0xD6, 0xC5, 0x5B, 0x80, 0xF2, 0x1A, 0x03, 0x01, 0x51, 0x56, 0x72, 0x60, 0x96, 0xFD, 0x33, 0x5E, 0x5E, 0x67, 0xF2, 0xDB, 0xF1, 0x02, 0x70, 0x2E, 0x60, 0x8C, 0xCA, 0xE6, 0xBE, 0xC1, 0xFC, 0x63, 0xA4, 0x2A, 0x99, 0xBE, 0x5C, 0x3E, 0xB7, 0x10, 0x7C, 0x3C, 0x54, 0xE9, 0xB9, 0xEB, 0x2B, 0xD5, 0x20, 0x3B, 0x1C, 0x3B, 0x84, 0xE0, 0xA8, 0xB2, 0xF7, 0x59, 0x40, 0x9B, 0xA3, 0xEA, 0xC9, 0xD9, 0x1D, 0x40, 0x2D, 0xCC, 0x0C, 0xC8, 0xF8, 0x96, 0x12, 0x29, 0xAC, 0x91, 0x87, 0xB4, 0x2B, 0x4D, 0xE1, 0x00, 0x00 };
    const certificate_verify = [_]u8{ 0x0F, 0x00, 0x00, 0x84, 0x08, 0x04, 0x00, 0x80, 0x5A, 0x74, 0x7C, 0x5D, 0x88, 0xFA, 0x9B, 0xD2, 0xE5, 0x5A, 0xB0, 0x85, 0xA6, 0x10, 0x15, 0xB7, 0x21, 0x1F, 0x82, 0x4C, 0xD4, 0x84, 0x14, 0x5A, 0xB3, 0xFF, 0x52, 0xF1, 0xFD, 0xA8, 0x47, 0x7B, 0x0B, 0x7A, 0xBC, 0x90, 0xDB, 0x78, 0xE2, 0xD3, 0x3A, 0x5C, 0x14, 0x1A, 0x07, 0x86, 0x53, 0xFA, 0x6B, 0xEF, 0x78, 0x0C, 0x5E, 0xA2, 0x48, 0xEE, 0xAA, 0xA7, 0x85, 0xC4, 0xF3, 0x94, 0xCA, 0xB6, 0xD3, 0x0B, 0xBE, 0x8D, 0x48, 0x59, 0xEE, 0x51, 0x1F, 0x60, 0x29, 0x57, 0xB1, 0x54, 0x11, 0xAC, 0x02, 0x76, 0x71, 0x45, 0x9E, 0x46, 0x44, 0x5C, 0x9E, 0xA5, 0x8C, 0x18, 0x1E, 0x81, 0x8E, 0x95, 0xB8, 0xC3, 0xFB, 0x0B, 0xF3, 0x27, 0x84, 0x09, 0xD3, 0xBE, 0x15, 0x2A, 0x3D, 0xA5, 0x04, 0x3E, 0x06, 0x3D, 0xDA, 0x65, 0xCD, 0xF5, 0xAE, 0xA2, 0x0D, 0x53, 0xDF, 0xAC, 0xD4, 0x2F, 0x74, 0xF3 };
    const finished = [_]u8{ 0x14, 0x00, 0x00, 0x20, 0x9b, 0x9b, 0x14, 0x1d, 0x90, 0x63, 0x37, 0xfb, 0xd2, 0xcb, 0xdc, 0xe7, 0x1d, 0xf4, 0xde, 0xda, 0x4a, 0xb4, 0x2c, 0x30, 0x95, 0x72, 0xcb, 0x7f, 0xff, 0xee, 0x54, 0x54, 0xb7, 0x8f, 0x07, 0x18 };
    const msg = client_hello ++ server_hello ++ encrypted_extensions ++ certificate ++ certificate_verify ++ finished;

    const secret = try deriveSecret(Sha256, prk, "c ap traffic", &msg);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive secret 'tls13 s ap traffic'" {
    const prk = [_]u8{ 0x18, 0xdf, 0x06, 0x84, 0x3d, 0x13, 0xa0, 0x8b, 0xf2, 0xa4, 0x49, 0x84, 0x4c, 0x5f, 0x8a, 0x47, 0x80, 0x01, 0xbc, 0x4d, 0x4c, 0x62, 0x79, 0x84, 0xd5, 0xa4, 0x1d, 0xa8, 0xd0, 0x40, 0x29, 0x19 };
    const secret_ans = [_]u8{ 0xa1, 0x1a, 0xf9, 0xf0, 0x55, 0x31, 0xf8, 0x56, 0xad, 0x47, 0x11, 0x6b, 0x45, 0xa9, 0x50, 0x32, 0x82, 0x04, 0xb4, 0xf4, 0x4b, 0xfb, 0x6b, 0x3a, 0x4b, 0x4f, 0x1f, 0x3f, 0xcb, 0x63, 0x16, 0x43 };

    const client_hello = [_]u8{ 0x01, 0x00, 0x00, 0xc0, 0x03, 0x03, 0xcb, 0x34, 0xec, 0xb1, 0xe7, 0x81, 0x63, 0xba, 0x1c, 0x38, 0xc6, 0xda, 0xcb, 0x19, 0x6a, 0x6d, 0xff, 0xa2, 0x1a, 0x8d, 0x99, 0x12, 0xec, 0x18, 0xa2, 0xef, 0x62, 0x83, 0x02, 0x4d, 0xec, 0xe7, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x03, 0x13, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x01, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01 };
    const server_hello = [_]u8{ 0x02, 0x00, 0x00, 0x56, 0x03, 0x03, 0xa6, 0xaf, 0x06, 0xa4, 0x12, 0x18, 0x60, 0xdc, 0x5e, 0x6e, 0x60, 0x24, 0x9c, 0xd3, 0x4c, 0x95, 0x93, 0x0c, 0x8a, 0xc5, 0xcb, 0x14, 0x34, 0xda, 0xc1, 0x55, 0x77, 0x2e, 0xd3, 0xe2, 0x69, 0x28, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x82, 0x88, 0x76, 0x11, 0x20, 0x95, 0xfe, 0x66, 0x76, 0x2b, 0xdb, 0xf7, 0xc6, 0x72, 0xe1, 0x56, 0xd6, 0xcc, 0x25, 0x3b, 0x83, 0x3d, 0xf1, 0xdd, 0x69, 0xb1, 0xb0, 0x4e, 0x75, 0x1f, 0x0f, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04 };
    const encrypted_extensions = [_]u8{ 0x08, 0x00, 0x00, 0x24, 0x00, 0x22, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x1C, 0x00, 0x02, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00 };
    const certificate = [_]u8{ 0x0B, 0x00, 0x01, 0xB9, 0x00, 0x00, 0x01, 0xB5, 0x00, 0x01, 0xB0, 0x30, 0x82, 0x01, 0xAC, 0x30, 0x82, 0x01, 0x15, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xB4, 0xBB, 0x49, 0x8F, 0x82, 0x79, 0x30, 0x3D, 0x98, 0x08, 0x36, 0x39, 0x9B, 0x36, 0xC6, 0x98, 0x8C, 0x0C, 0x68, 0xDE, 0x55, 0xE1, 0xBD, 0xB8, 0x26, 0xD3, 0x90, 0x1A, 0x24, 0x61, 0xEA, 0xFD, 0x2D, 0xE4, 0x9A, 0x91, 0xD0, 0x15, 0xAB, 0xBC, 0x9A, 0x95, 0x13, 0x7A, 0xCE, 0x6C, 0x1A, 0xF1, 0x9E, 0xAA, 0x6A, 0xF9, 0x8C, 0x7C, 0xED, 0x43, 0x12, 0x09, 0x98, 0xE1, 0x87, 0xA8, 0x0E, 0xE0, 0xCC, 0xB0, 0x52, 0x4B, 0x1B, 0x01, 0x8C, 0x3E, 0x0B, 0x63, 0x26, 0x4D, 0x44, 0x9A, 0x6D, 0x38, 0xE2, 0x2A, 0x5F, 0xDA, 0x43, 0x08, 0x46, 0x74, 0x80, 0x30, 0x53, 0x0E, 0xF0, 0x46, 0x1C, 0x8C, 0xA9, 0xD9, 0xEF, 0xBF, 0xAE, 0x8E, 0xA6, 0xD1, 0xD0, 0x3E, 0x2B, 0xD1, 0x93, 0xEF, 0xF0, 0xAB, 0x9A, 0x80, 0x02, 0xC4, 0x74, 0x28, 0xA6, 0xD3, 0x5A, 0x8D, 0x88, 0xD7, 0x9F, 0x7F, 0x1E, 0x3F, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x1A, 0x30, 0x18, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x85, 0xAA, 0xD2, 0xA0, 0xE5, 0xB9, 0x27, 0x6B, 0x90, 0x8C, 0x65, 0xF7, 0x3A, 0x72, 0x67, 0x17, 0x06, 0x18, 0xA5, 0x4C, 0x5F, 0x8A, 0x7B, 0x33, 0x7D, 0x2D, 0xF7, 0xA5, 0x94, 0x36, 0x54, 0x17, 0xF2, 0xEA, 0xE8, 0xF8, 0xA5, 0x8C, 0x8F, 0x81, 0x72, 0xF9, 0x31, 0x9C, 0xF3, 0x6B, 0x7F, 0xD6, 0xC5, 0x5B, 0x80, 0xF2, 0x1A, 0x03, 0x01, 0x51, 0x56, 0x72, 0x60, 0x96, 0xFD, 0x33, 0x5E, 0x5E, 0x67, 0xF2, 0xDB, 0xF1, 0x02, 0x70, 0x2E, 0x60, 0x8C, 0xCA, 0xE6, 0xBE, 0xC1, 0xFC, 0x63, 0xA4, 0x2A, 0x99, 0xBE, 0x5C, 0x3E, 0xB7, 0x10, 0x7C, 0x3C, 0x54, 0xE9, 0xB9, 0xEB, 0x2B, 0xD5, 0x20, 0x3B, 0x1C, 0x3B, 0x84, 0xE0, 0xA8, 0xB2, 0xF7, 0x59, 0x40, 0x9B, 0xA3, 0xEA, 0xC9, 0xD9, 0x1D, 0x40, 0x2D, 0xCC, 0x0C, 0xC8, 0xF8, 0x96, 0x12, 0x29, 0xAC, 0x91, 0x87, 0xB4, 0x2B, 0x4D, 0xE1, 0x00, 0x00 };
    const certificate_verify = [_]u8{ 0x0F, 0x00, 0x00, 0x84, 0x08, 0x04, 0x00, 0x80, 0x5A, 0x74, 0x7C, 0x5D, 0x88, 0xFA, 0x9B, 0xD2, 0xE5, 0x5A, 0xB0, 0x85, 0xA6, 0x10, 0x15, 0xB7, 0x21, 0x1F, 0x82, 0x4C, 0xD4, 0x84, 0x14, 0x5A, 0xB3, 0xFF, 0x52, 0xF1, 0xFD, 0xA8, 0x47, 0x7B, 0x0B, 0x7A, 0xBC, 0x90, 0xDB, 0x78, 0xE2, 0xD3, 0x3A, 0x5C, 0x14, 0x1A, 0x07, 0x86, 0x53, 0xFA, 0x6B, 0xEF, 0x78, 0x0C, 0x5E, 0xA2, 0x48, 0xEE, 0xAA, 0xA7, 0x85, 0xC4, 0xF3, 0x94, 0xCA, 0xB6, 0xD3, 0x0B, 0xBE, 0x8D, 0x48, 0x59, 0xEE, 0x51, 0x1F, 0x60, 0x29, 0x57, 0xB1, 0x54, 0x11, 0xAC, 0x02, 0x76, 0x71, 0x45, 0x9E, 0x46, 0x44, 0x5C, 0x9E, 0xA5, 0x8C, 0x18, 0x1E, 0x81, 0x8E, 0x95, 0xB8, 0xC3, 0xFB, 0x0B, 0xF3, 0x27, 0x84, 0x09, 0xD3, 0xBE, 0x15, 0x2A, 0x3D, 0xA5, 0x04, 0x3E, 0x06, 0x3D, 0xDA, 0x65, 0xCD, 0xF5, 0xAE, 0xA2, 0x0D, 0x53, 0xDF, 0xAC, 0xD4, 0x2F, 0x74, 0xF3 };
    const finished = [_]u8{ 0x14, 0x00, 0x00, 0x20, 0x9b, 0x9b, 0x14, 0x1d, 0x90, 0x63, 0x37, 0xfb, 0xd2, 0xcb, 0xdc, 0xe7, 0x1d, 0xf4, 0xde, 0xda, 0x4a, 0xb4, 0x2c, 0x30, 0x95, 0x72, 0xcb, 0x7f, 0xff, 0xee, 0x54, 0x54, 0xb7, 0x8f, 0x07, 0x18 };
    const msg = client_hello ++ server_hello ++ encrypted_extensions ++ certificate ++ certificate_verify ++ finished;

    const secret = try deriveSecret(Sha256, prk, "s ap traffic", &msg);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive secret 'tls13 exp master'" {
    const prk = [_]u8{ 0x18, 0xdf, 0x06, 0x84, 0x3d, 0x13, 0xa0, 0x8b, 0xf2, 0xa4, 0x49, 0x84, 0x4c, 0x5f, 0x8a, 0x47, 0x80, 0x01, 0xbc, 0x4d, 0x4c, 0x62, 0x79, 0x84, 0xd5, 0xa4, 0x1d, 0xa8, 0xd0, 0x40, 0x29, 0x19 };
    const secret_ans = [_]u8{ 0xfe, 0x22, 0xf8, 0x81, 0x17, 0x6e, 0xda, 0x18, 0xeb, 0x8f, 0x44, 0x52, 0x9e, 0x67, 0x92, 0xc5, 0x0c, 0x9a, 0x3f, 0x89, 0x45, 0x2f, 0x68, 0xd8, 0xae, 0x31, 0x1b, 0x43, 0x09, 0xd3, 0xcf, 0x50 };

    const client_hello = [_]u8{ 0x01, 0x00, 0x00, 0xc0, 0x03, 0x03, 0xcb, 0x34, 0xec, 0xb1, 0xe7, 0x81, 0x63, 0xba, 0x1c, 0x38, 0xc6, 0xda, 0xcb, 0x19, 0x6a, 0x6d, 0xff, 0xa2, 0x1a, 0x8d, 0x99, 0x12, 0xec, 0x18, 0xa2, 0xef, 0x62, 0x83, 0x02, 0x4d, 0xec, 0xe7, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x03, 0x13, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x01, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01 };
    const server_hello = [_]u8{ 0x02, 0x00, 0x00, 0x56, 0x03, 0x03, 0xa6, 0xaf, 0x06, 0xa4, 0x12, 0x18, 0x60, 0xdc, 0x5e, 0x6e, 0x60, 0x24, 0x9c, 0xd3, 0x4c, 0x95, 0x93, 0x0c, 0x8a, 0xc5, 0xcb, 0x14, 0x34, 0xda, 0xc1, 0x55, 0x77, 0x2e, 0xd3, 0xe2, 0x69, 0x28, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x82, 0x88, 0x76, 0x11, 0x20, 0x95, 0xfe, 0x66, 0x76, 0x2b, 0xdb, 0xf7, 0xc6, 0x72, 0xe1, 0x56, 0xd6, 0xcc, 0x25, 0x3b, 0x83, 0x3d, 0xf1, 0xdd, 0x69, 0xb1, 0xb0, 0x4e, 0x75, 0x1f, 0x0f, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04 };
    const encrypted_extensions = [_]u8{ 0x08, 0x00, 0x00, 0x24, 0x00, 0x22, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x1C, 0x00, 0x02, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00 };
    const certificate = [_]u8{ 0x0B, 0x00, 0x01, 0xB9, 0x00, 0x00, 0x01, 0xB5, 0x00, 0x01, 0xB0, 0x30, 0x82, 0x01, 0xAC, 0x30, 0x82, 0x01, 0x15, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xB4, 0xBB, 0x49, 0x8F, 0x82, 0x79, 0x30, 0x3D, 0x98, 0x08, 0x36, 0x39, 0x9B, 0x36, 0xC6, 0x98, 0x8C, 0x0C, 0x68, 0xDE, 0x55, 0xE1, 0xBD, 0xB8, 0x26, 0xD3, 0x90, 0x1A, 0x24, 0x61, 0xEA, 0xFD, 0x2D, 0xE4, 0x9A, 0x91, 0xD0, 0x15, 0xAB, 0xBC, 0x9A, 0x95, 0x13, 0x7A, 0xCE, 0x6C, 0x1A, 0xF1, 0x9E, 0xAA, 0x6A, 0xF9, 0x8C, 0x7C, 0xED, 0x43, 0x12, 0x09, 0x98, 0xE1, 0x87, 0xA8, 0x0E, 0xE0, 0xCC, 0xB0, 0x52, 0x4B, 0x1B, 0x01, 0x8C, 0x3E, 0x0B, 0x63, 0x26, 0x4D, 0x44, 0x9A, 0x6D, 0x38, 0xE2, 0x2A, 0x5F, 0xDA, 0x43, 0x08, 0x46, 0x74, 0x80, 0x30, 0x53, 0x0E, 0xF0, 0x46, 0x1C, 0x8C, 0xA9, 0xD9, 0xEF, 0xBF, 0xAE, 0x8E, 0xA6, 0xD1, 0xD0, 0x3E, 0x2B, 0xD1, 0x93, 0xEF, 0xF0, 0xAB, 0x9A, 0x80, 0x02, 0xC4, 0x74, 0x28, 0xA6, 0xD3, 0x5A, 0x8D, 0x88, 0xD7, 0x9F, 0x7F, 0x1E, 0x3F, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x1A, 0x30, 0x18, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x85, 0xAA, 0xD2, 0xA0, 0xE5, 0xB9, 0x27, 0x6B, 0x90, 0x8C, 0x65, 0xF7, 0x3A, 0x72, 0x67, 0x17, 0x06, 0x18, 0xA5, 0x4C, 0x5F, 0x8A, 0x7B, 0x33, 0x7D, 0x2D, 0xF7, 0xA5, 0x94, 0x36, 0x54, 0x17, 0xF2, 0xEA, 0xE8, 0xF8, 0xA5, 0x8C, 0x8F, 0x81, 0x72, 0xF9, 0x31, 0x9C, 0xF3, 0x6B, 0x7F, 0xD6, 0xC5, 0x5B, 0x80, 0xF2, 0x1A, 0x03, 0x01, 0x51, 0x56, 0x72, 0x60, 0x96, 0xFD, 0x33, 0x5E, 0x5E, 0x67, 0xF2, 0xDB, 0xF1, 0x02, 0x70, 0x2E, 0x60, 0x8C, 0xCA, 0xE6, 0xBE, 0xC1, 0xFC, 0x63, 0xA4, 0x2A, 0x99, 0xBE, 0x5C, 0x3E, 0xB7, 0x10, 0x7C, 0x3C, 0x54, 0xE9, 0xB9, 0xEB, 0x2B, 0xD5, 0x20, 0x3B, 0x1C, 0x3B, 0x84, 0xE0, 0xA8, 0xB2, 0xF7, 0x59, 0x40, 0x9B, 0xA3, 0xEA, 0xC9, 0xD9, 0x1D, 0x40, 0x2D, 0xCC, 0x0C, 0xC8, 0xF8, 0x96, 0x12, 0x29, 0xAC, 0x91, 0x87, 0xB4, 0x2B, 0x4D, 0xE1, 0x00, 0x00 };
    const certificate_verify = [_]u8{ 0x0F, 0x00, 0x00, 0x84, 0x08, 0x04, 0x00, 0x80, 0x5A, 0x74, 0x7C, 0x5D, 0x88, 0xFA, 0x9B, 0xD2, 0xE5, 0x5A, 0xB0, 0x85, 0xA6, 0x10, 0x15, 0xB7, 0x21, 0x1F, 0x82, 0x4C, 0xD4, 0x84, 0x14, 0x5A, 0xB3, 0xFF, 0x52, 0xF1, 0xFD, 0xA8, 0x47, 0x7B, 0x0B, 0x7A, 0xBC, 0x90, 0xDB, 0x78, 0xE2, 0xD3, 0x3A, 0x5C, 0x14, 0x1A, 0x07, 0x86, 0x53, 0xFA, 0x6B, 0xEF, 0x78, 0x0C, 0x5E, 0xA2, 0x48, 0xEE, 0xAA, 0xA7, 0x85, 0xC4, 0xF3, 0x94, 0xCA, 0xB6, 0xD3, 0x0B, 0xBE, 0x8D, 0x48, 0x59, 0xEE, 0x51, 0x1F, 0x60, 0x29, 0x57, 0xB1, 0x54, 0x11, 0xAC, 0x02, 0x76, 0x71, 0x45, 0x9E, 0x46, 0x44, 0x5C, 0x9E, 0xA5, 0x8C, 0x18, 0x1E, 0x81, 0x8E, 0x95, 0xB8, 0xC3, 0xFB, 0x0B, 0xF3, 0x27, 0x84, 0x09, 0xD3, 0xBE, 0x15, 0x2A, 0x3D, 0xA5, 0x04, 0x3E, 0x06, 0x3D, 0xDA, 0x65, 0xCD, 0xF5, 0xAE, 0xA2, 0x0D, 0x53, 0xDF, 0xAC, 0xD4, 0x2F, 0x74, 0xF3 };
    const finished = [_]u8{ 0x14, 0x00, 0x00, 0x20, 0x9b, 0x9b, 0x14, 0x1d, 0x90, 0x63, 0x37, 0xfb, 0xd2, 0xcb, 0xdc, 0xe7, 0x1d, 0xf4, 0xde, 0xda, 0x4a, 0xb4, 0x2c, 0x30, 0x95, 0x72, 0xcb, 0x7f, 0xff, 0xee, 0x54, 0x54, 0xb7, 0x8f, 0x07, 0x18 };
    const msg = client_hello ++ server_hello ++ encrypted_extensions ++ certificate ++ certificate_verify ++ finished;

    const secret = try deriveSecret(Sha256, prk, "exp master", &msg);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive secret 'tls13 res master'" {
    const prk = [_]u8{0x18, 0xdf, 0x06, 0x84, 0x3d, 0x13, 0xa0, 0x8b, 0xf2, 0xa4, 0x49, 0x84, 0x4c, 0x5f, 0x8a, 0x47, 0x80, 0x01, 0xbc, 0x4d, 0x4c, 0x62, 0x79, 0x84, 0xd5, 0xa4, 0x1d, 0xa8, 0xd0, 0x40, 0x29, 0x19};
    const secret_ans = [_]u8{0x7d, 0xf2, 0x35, 0xf2, 0x03, 0x1d, 0x2a, 0x05, 0x12, 0x87, 0xd0, 0x2b, 0x02, 0x41, 0xb0, 0xbf, 0xda, 0xf8, 0x6c, 0xc8, 0x56, 0x23, 0x1f, 0x2d, 0x5a, 0xba, 0x46, 0xc4, 0x34, 0xec, 0x19, 0x6c};

    const client_hello = [_]u8{0x01, 0x00, 0x00, 0xc0, 0x03, 0x03, 0xcb, 0x34, 0xec, 0xb1, 0xe7, 0x81, 0x63, 0xba, 0x1c, 0x38, 0xc6, 0xda, 0xcb, 0x19, 0x6a, 0x6d, 0xff, 0xa2, 0x1a, 0x8d, 0x99, 0x12, 0xec, 0x18, 0xa2, 0xef, 0x62, 0x83, 0x02, 0x4d, 0xec, 0xe7, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x03, 0x13, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x99, 0x38, 0x1d, 0xe5, 0x60, 0xe4, 0xbd, 0x43, 0xd2, 0x3d, 0x8e, 0x43, 0x5a, 0x7d, 0xba, 0xfe, 0xb3, 0xc0, 0x6e, 0x51, 0xc1, 0x3c, 0xae, 0x4d, 0x54, 0x13, 0x69, 0x1e, 0x52, 0x9a, 0xaf, 0x2c, 0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x02, 0x03, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x02, 0x01, 0x04, 0x02, 0x05, 0x02, 0x06, 0x02, 0x02, 0x02, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x1c, 0x00, 0x02, 0x40, 0x01};
    const server_hello = [_]u8{0x02, 0x00, 0x00, 0x56, 0x03, 0x03, 0xa6, 0xaf, 0x06, 0xa4, 0x12, 0x18, 0x60, 0xdc, 0x5e, 0x6e, 0x60, 0x24, 0x9c, 0xd3, 0x4c, 0x95, 0x93, 0x0c, 0x8a, 0xc5, 0xcb, 0x14, 0x34, 0xda, 0xc1, 0x55, 0x77, 0x2e, 0xd3, 0xe2, 0x69, 0x28, 0x00, 0x13, 0x01, 0x00, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0xc9, 0x82, 0x88, 0x76, 0x11, 0x20, 0x95, 0xfe, 0x66, 0x76, 0x2b, 0xdb, 0xf7, 0xc6, 0x72, 0xe1, 0x56, 0xd6, 0xcc, 0x25, 0x3b, 0x83, 0x3d, 0xf1, 0xdd, 0x69, 0xb1, 0xb0, 0x4e, 0x75, 0x1f, 0x0f, 0x00, 0x2b, 0x00, 0x02, 0x03, 0x04};
    const encrypted_extensions = [_]u8{0x08, 0x00, 0x00, 0x24, 0x00, 0x22, 0x00, 0x0A, 0x00, 0x14, 0x00, 0x12, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x1C, 0x00, 0x02, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00};
    const certificate = [_]u8{0x0B, 0x00, 0x01, 0xB9, 0x00, 0x00, 0x01, 0xB5, 0x00, 0x01, 0xB0, 0x30, 0x82, 0x01, 0xAC, 0x30, 0x82, 0x01, 0x15, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x36, 0x30, 0x37, 0x33, 0x30, 0x30, 0x31, 0x32, 0x33, 0x35, 0x39, 0x5A, 0x30, 0x0E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x03, 0x72, 0x73, 0x61, 0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xB4, 0xBB, 0x49, 0x8F, 0x82, 0x79, 0x30, 0x3D, 0x98, 0x08, 0x36, 0x39, 0x9B, 0x36, 0xC6, 0x98, 0x8C, 0x0C, 0x68, 0xDE, 0x55, 0xE1, 0xBD, 0xB8, 0x26, 0xD3, 0x90, 0x1A, 0x24, 0x61, 0xEA, 0xFD, 0x2D, 0xE4, 0x9A, 0x91, 0xD0, 0x15, 0xAB, 0xBC, 0x9A, 0x95, 0x13, 0x7A, 0xCE, 0x6C, 0x1A, 0xF1, 0x9E, 0xAA, 0x6A, 0xF9, 0x8C, 0x7C, 0xED, 0x43, 0x12, 0x09, 0x98, 0xE1, 0x87, 0xA8, 0x0E, 0xE0, 0xCC, 0xB0, 0x52, 0x4B, 0x1B, 0x01, 0x8C, 0x3E, 0x0B, 0x63, 0x26, 0x4D, 0x44, 0x9A, 0x6D, 0x38, 0xE2, 0x2A, 0x5F, 0xDA, 0x43, 0x08, 0x46, 0x74, 0x80, 0x30, 0x53, 0x0E, 0xF0, 0x46, 0x1C, 0x8C, 0xA9, 0xD9, 0xEF, 0xBF, 0xAE, 0x8E, 0xA6, 0xD1, 0xD0, 0x3E, 0x2B, 0xD1, 0x93, 0xEF, 0xF0, 0xAB, 0x9A, 0x80, 0x02, 0xC4, 0x74, 0x28, 0xA6, 0xD3, 0x5A, 0x8D, 0x88, 0xD7, 0x9F, 0x7F, 0x1E, 0x3F, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x1A, 0x30, 0x18, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 0x85, 0xAA, 0xD2, 0xA0, 0xE5, 0xB9, 0x27, 0x6B, 0x90, 0x8C, 0x65, 0xF7, 0x3A, 0x72, 0x67, 0x17, 0x06, 0x18, 0xA5, 0x4C, 0x5F, 0x8A, 0x7B, 0x33, 0x7D, 0x2D, 0xF7, 0xA5, 0x94, 0x36, 0x54, 0x17, 0xF2, 0xEA, 0xE8, 0xF8, 0xA5, 0x8C, 0x8F, 0x81, 0x72, 0xF9, 0x31, 0x9C, 0xF3, 0x6B, 0x7F, 0xD6, 0xC5, 0x5B, 0x80, 0xF2, 0x1A, 0x03, 0x01, 0x51, 0x56, 0x72, 0x60, 0x96, 0xFD, 0x33, 0x5E, 0x5E, 0x67, 0xF2, 0xDB, 0xF1, 0x02, 0x70, 0x2E, 0x60, 0x8C, 0xCA, 0xE6, 0xBE, 0xC1, 0xFC, 0x63, 0xA4, 0x2A, 0x99, 0xBE, 0x5C, 0x3E, 0xB7, 0x10, 0x7C, 0x3C, 0x54, 0xE9, 0xB9, 0xEB, 0x2B, 0xD5, 0x20, 0x3B, 0x1C, 0x3B, 0x84, 0xE0, 0xA8, 0xB2, 0xF7, 0x59, 0x40, 0x9B, 0xA3, 0xEA, 0xC9, 0xD9, 0x1D, 0x40, 0x2D, 0xCC, 0x0C, 0xC8, 0xF8, 0x96, 0x12, 0x29, 0xAC, 0x91, 0x87, 0xB4, 0x2B, 0x4D, 0xE1, 0x00, 0x00};
    const certificate_verify = [_]u8{0x0F, 0x00, 0x00, 0x84, 0x08, 0x04, 0x00, 0x80, 0x5A, 0x74, 0x7C, 0x5D, 0x88, 0xFA, 0x9B, 0xD2, 0xE5, 0x5A, 0xB0, 0x85, 0xA6, 0x10, 0x15, 0xB7, 0x21, 0x1F, 0x82, 0x4C, 0xD4, 0x84, 0x14, 0x5A, 0xB3, 0xFF, 0x52, 0xF1, 0xFD, 0xA8, 0x47, 0x7B, 0x0B, 0x7A, 0xBC, 0x90, 0xDB, 0x78, 0xE2, 0xD3, 0x3A, 0x5C, 0x14, 0x1A, 0x07, 0x86, 0x53, 0xFA, 0x6B, 0xEF, 0x78, 0x0C, 0x5E, 0xA2, 0x48, 0xEE, 0xAA, 0xA7, 0x85, 0xC4, 0xF3, 0x94, 0xCA, 0xB6, 0xD3, 0x0B, 0xBE, 0x8D, 0x48, 0x59, 0xEE, 0x51, 0x1F, 0x60, 0x29, 0x57, 0xB1, 0x54, 0x11, 0xAC, 0x02, 0x76, 0x71, 0x45, 0x9E, 0x46, 0x44, 0x5C, 0x9E, 0xA5, 0x8C, 0x18, 0x1E, 0x81, 0x8E, 0x95, 0xB8, 0xC3, 0xFB, 0x0B, 0xF3, 0x27, 0x84, 0x09, 0xD3, 0xBE, 0x15, 0x2A, 0x3D, 0xA5, 0x04, 0x3E, 0x06, 0x3D, 0xDA, 0x65, 0xCD, 0xF5, 0xAE, 0xA2, 0x0D, 0x53, 0xDF, 0xAC, 0xD4, 0x2F, 0x74, 0xF3};
    const finished = [_]u8{0x14, 0x00, 0x00, 0x20, 0x9b, 0x9b, 0x14, 0x1d, 0x90, 0x63, 0x37, 0xfb, 0xd2, 0xcb, 0xdc, 0xe7, 0x1d, 0xf4, 0xde, 0xda, 0x4a, 0xb4, 0x2c, 0x30, 0x95, 0x72, 0xcb, 0x7f, 0xff, 0xee, 0x54, 0x54, 0xb7, 0x8f, 0x07, 0x18};
    const c_finished = [_]u8{0x14, 0x0, 0x0, 0x20, 0xa8, 0xec, 0x43, 0x6d, 0x67, 0x76, 0x34, 0xae, 0x52, 0x5a, 0xc1, 0xfc, 0xeb, 0xe1, 0x1a, 0x03, 0x9e, 0xc1, 0x76, 0x94, 0xfa, 0xc6, 0xe9, 0x85, 0x27, 0xb6, 0x42, 0xf2, 0xed, 0xd5, 0xce, 0x61};
    const msg = client_hello ++ server_hello ++ encrypted_extensions ++ certificate ++ certificate_verify ++ finished ++ c_finished;

    const secret = try deriveSecret(Sha256, prk, "res master", &msg);
    try expect(std.mem.eql(u8, &secret, &secret_ans));
}

test "derive write traffic keys for application data" {
    const prk = [_]u8{ 0xa1, 0x1a, 0xf9, 0xf0, 0x55, 0x31, 0xf8, 0x56, 0xad, 0x47, 0x11, 0x6b, 0x45, 0xa9, 0x50, 0x32, 0x82, 0x04, 0xb4, 0xf4, 0x4b, 0xfb, 0x6b, 0x3a, 0x4b, 0x4f, 0x1f, 0x3f, 0xcb, 0x63, 0x16, 0x43 };

    const key_ans = [_]u8{ 0x9f, 0x02, 0x28, 0x3b, 0x6c, 0x9c, 0x07, 0xef, 0xc2, 0x6b, 0xb9, 0xf2, 0xac, 0x92, 0xe3, 0x56 };
    const iv_ans = [_]u8{ 0xcf, 0x78, 0x2b, 0x88, 0xdd, 0x83, 0x54, 0x9a, 0xad, 0xf1, 0xe9, 0x84 };

    const key = try hkdfExpandLabel(Sha256, prk, "key", "", 16);
    try expect(std.mem.eql(u8, &key, &key_ans));

    const iv = try hkdfExpandLabel(Sha256, prk, "iv", "", 12);
    try expect(std.mem.eql(u8, &iv, &iv_ans));
}

test "derive read traffic keys for handshake data" {
    const prk = [_]u8{ 0xb3, 0xed, 0xdb, 0x12, 0x6e, 0x06, 0x7f, 0x35, 0xa7, 0x80, 0xb3, 0xab, 0xf4, 0x5e, 0x2d, 0x8f, 0x3b, 0x1a, 0x95, 0x07, 0x38, 0xf5, 0x2e, 0x96, 0x00, 0x74, 0x6a, 0x0e, 0x27, 0xa5, 0x5a, 0x21 };

    const key_ans = [_]u8{ 0xdb, 0xfa, 0xa6, 0x93, 0xd1, 0x76, 0x2c, 0x5b, 0x66, 0x6a, 0xf5, 0xd9, 0x50, 0x25, 0x8d, 0x01 };
    const iv_ans = [_]u8{ 0x5b, 0xd3, 0xc7, 0x1b, 0x83, 0x6e, 0x0b, 0x76, 0xbb, 0x73, 0x26, 0x5f };

    const key = try hkdfExpandLabel(Sha256, prk, "key", "", 16);
    try expect(std.mem.eql(u8, &key, &key_ans));

    const iv = try hkdfExpandLabel(Sha256, prk, "iv", "", 12);
    try expect(std.mem.eql(u8, &iv, &iv_ans));
}
